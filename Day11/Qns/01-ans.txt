
/* 1. Filter rows where the `salary` is missing. */
db.emps.find({ salary: null })

/* 2. Fill the missing values in the `salary` column with the average salary. */
var avgSalary = db.emps.aggregate([
    { $match: { salary: { $ne: null } } },
    { $group: { _id: null, avgSalary: { $avg: "$salary" } } }
]).toArray()[0].avgSalary;
db.emps.updateMany({ salary: null }, { $set: { salary: avgSalary } })

/* 3. Create new columns `join_year` and `join_month` from the `join_date` column. */
db.emps.updateMany({}, [
    { $set: {
            join_year: { $year: "$join_date" },
            join_month: { $month: "$join_date" }
        }
    }
])

/* 4. Select all employees from the `IT` department earning more than 50000. */
db.emps.find({ department: "IT", salary: { $gt: 50000 } })

/* 5. Retrieve all employees who joined before `2017-01-01`. */
db.emps.find({ join_date: { $lt: ISODate("2017-01-01") } })

/* 6. Get the top 5 employees with the highest `performance_score`. */
db.emps.find().sort({ performance_score: -1 }).limit(5)

/* 7. List all employees from `Boston` in the `Marketing` department. */
db.emps.find({ city: "Boston", department: "Marketing" })

/* 8. Find the average salary by each department. */
db.emps.aggregate([
    { $group: { _id: "$department", avgSalary: { $avg: "$salary" } } }
])

/* 9. Count the number of employees in each city. */
db.emps.aggregate([
    { $group: { _id: "$city", count: { $sum: 1 } } }
])

/* 10. Find the maximum performance score in each department. */
db.emps.aggregate([
    { $group: { _id: "$department", maxScore: { $max: "$performance_score" } } }
])

/* 11. Calculate the total salary paid to employees in the `Finance` department. */
db.emps.aggregate([
    { $match: { department: "Finance" } },
    { $group: { _id: null, totalSalary: { $sum: "$salary" } } }
])

/* 12. Find the number of employees who joined each year. */
db.emps.aggregate([
    { $group: { _id: "$join_year" , count: { $sum: 1 } } } 
])

/* 13. Join the employee dataset with `departments.csv` on the `department` column using a left join. */
db.emps.aggregate([
    {
        $lookup: {
            from: "depts",
            localField: "department",
            foreignField: "department",
            as: "dept_info"
        }
    }
])

/* 14. After joining, display employees along with their respective managers. */
db.emps.aggregate([
    {
        $lookup: {
            from: "depts",
            localField: "department",
            foreignField: "department",
            as: "dept_info"
        }
    },
    { $unwind: "$dept_info" },
    { $project: { name: 1, department: 1, manager: "$dept_info.manager" } }
])


/* 15. List employees whose manager is `Clara`. */
db.emps.aggregate([
    {
        $lookup: {
            from: "depts",
            localField: "department",
            foreignField: "department",
            as: "dept_info"
        }
    },
    { $unwind: "$dept_info" },
    { $match: { "dept_info.manager": "Clara" } }
])